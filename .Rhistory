if(!is.null(startdate) & !is.null(enddate) & !is.null(lastupdate)) {
stop("Enter both a startdate and enddate, or a lastupdate, or nothing")
}
if(is.null(startdate) != is.null(enddate)) {
stop("Enter both a startdate and enddate, or a lastupdate, or nothing")
}
req <- httr::GET("https://wbsapi.withings.net/v2/measure?action=getworkouts",
query=list(access_token=token$credentials$access_token,
startdateymd = startdate,
enddateymd = enddate,
offset = offset,
lastupdate = lastupdate))
stop_for_status(req)
out <- content(req)
out <- jsonlite::fromJSON(out)
if(out$status==0) {
out$body$series <- jsonlite::flatten(out$body$series)
out$body$series$startdate <- as.POSIXct(out$body$series$startdate, tz=tz, origin="1970-01-01")
out$body$series$enddate <- as.POSIXct(out$body$series$enddate, tz=tz, origin="1970-01-01")
out$body$series$data.device_startdate <- as.POSIXct(out$body$series$data.device_startdate, tz=tz, origin="1970-01-01")
out$body$series$data.device_enddate <- as.POSIXct(out$body$series$data.device_enddate, tz=tz, origin="1970-01-01")
}
return(out)
}
use_package("jsonlite")
getmeas(token, meastype = 1, category=1, "2018-01-01", "2018-10-18")
#' Get Measures
#'
#' @param token Your token obtained using \code{withings_auth()}
#' @param meastype Which measure number should be obtained (see API)
#' @param category Which category number should be obtained (see API)
#' @param startdate Start date in character, date or POSIXct format
#' @param enddate End date in character, date or POSIXct format
#' @param offset Offset
#' @param lastupdate Last update (see API)
#' @param tz Time zone
#'
#' @return
#' @export
#'
#' @examples
#' \dontrun{
#' getmeas(token, meastype = 1, category=1, "2018-01-01", "2018-10-18")
#' }
getmeas <- function(token, meastype, category, startdate=NULL, enddate=NULL,
offset=NULL, lastupdate=NULL, tz=Sys.timezone()) {
# measures <- getmeas(token, meastype = 1, category=1, "2018-01-01", "2018-10-18")
if( class(startdate) == "character" ) { startdate = as.Date(startdate) }
if( class(enddate) == "character" ) { enddate = as.Date(enddate) }
if( class(lastupdate) == "character" ) { lastupdate = as.Date(lastupdate) }
if( class(startdate) == "Date" ) { startdate = as.POSIXct(startdate, tz=tz) }
if( class(enddate) == "Date" ) { enddate = as.POSIXct(enddate, tz=tz) }
if( class(lastupdate) == "Date" ) { lastupdate = as.POSIXct(lastupdate, tz=tz) }
if( sum(class(startdate) == "POSIXct")>=1 ) { startdate = as.numeric(startdate) }
if( sum(class(enddate) == "POSIXct")>=1 ) { enddate = as.numeric(enddate) }
if( sum(class(lastupdate) == "POSIXct")>=1 ) { lastupdate = as.numeric(lastupdate) }
if(!is.null(startdate) & !is.null(enddate) & !is.null(lastupdate)) {
stop("Enter both a startdate and enddate, or a lastupdate, or nothing")
}
if(is.null(startdate) != is.null(enddate)) {
stop("Enter both a startdate and enddate, or a lastupdate, or nothing")
}
req <- httr::GET("https://wbsapi.withings.net/measure?action=getmeas",
query=list(access_token=token$credentials$access_token,
meastype = meastype,
category = category,
startdate = startdate,
enddate = enddate,
offset = offset,
lastupdate = lastupdate))
httr::stop_for_status(req)
out <- httr::content(req)
out <- jsonlite::fromJSON(out)
if(out$status==0) {
out$body$updatetime = as.POSIXct(out$body$updatetime, tz=tz, origin="1970-01-01")
out$body$measuregrps <- jsonlite::flatten(out$body$measuregrps)
out$body$measuregrps$date <- as.POSIXct(out$body$measuregrps$date, tz=tz, origin="1970-01-01")
measures <- do.call("rbind", out$body$measuregrps$measures)
out$body$measuregrps <- dplyr::select(out$body$measuregrps, -"measures")
out$body$measuregrps <- dplyr::bind_cols(out$body$measuregrps, measures)
}
return(out)
}
getsleep <- function(token, startdate=NULL, enddate=NULL, tz="") {
# sleep <- getsleep(token, "2018-10-16", "2018-10-18")
if( class(startdate) == "character" ) { startdate = as.Date(startdate) }
if( class(enddate) == "character" ) { enddate = as.Date(enddate) }
if( class(startdate) == "Date" ) { startdate = as.POSIXct(startdate, tz=tz) }
if( class(enddate) == "Date" ) { enddate = as.POSIXct(enddate, tz=tz) }
if( sum(class(startdate) == "POSIXct")>=1 ) { startdate = as.numeric(startdate) }
if( sum(class(enddate) == "POSIXct")>=1 ) { enddate = as.numeric(enddate) }
if(is.null(startdate) != is.null(enddate)) {
stop("Enter both a startdate and enddate")
}
req <- httr::GET("https://wbsapi.withings.net/v2/sleep?action=get",
query=list(access_token=token$credentials$access_token,
startdate = startdate,
enddate = enddate))
httr::stop_for_status(req)
out <- httr::content(req)
out <- jsonlite::fromJSON(out)
if(out$status==0) {
out$body$series <- jsonlite::flatten(out$body$series)
out$body$series$startdate <- as.POSIXct(out$body$series$startdate, tz=tz, origin="1970-01-01")
out$body$series$enddate <- as.POSIXct(out$body$series$enddate, tz=tz, origin="1970-01-01")
out$body$series <- dplyr::arrange(out$body$series, startdate)
}
return(out)
}
getsleepsummary <- function(token, startdate=NULL, enddate=NULL, tz="") {
# measures <- getmeas(token, meastype = 1, category=1, "2018-01-01", "2018-10-18")
if( class(startdate) == "character" ) { startdate = as.Date(startdate) }
if( class(enddate) == "character" ) { enddate = as.Date(enddate) }
if( sum(class(startdate) == "POSIXct")>=1 ) { startdate = as.Date(startdate) }
if( sum(class(enddate) == "POSIXct")>=1 ) { enddate = as.Date(enddate) }
if(is.null(startdate) != is.null(enddate)) {
stop("Enter both a startdate and enddate")
}
req <- httr::httr::GET("https://wbsapi.withings.net/v2/sleep?action=getsummary",
query=list(access_token=token$credentials$access_token,
startdateymd = startdate,
enddateymd = enddate))
httr::httr::stop_for_status(req)
out <- httr::httr::content(req)
out <- jsonlite::fromJSON(out)
if(out$status==0) {
out$body$series <- jsonlite::flatten(out$body$series)
out$body$series$startdate <- as.POSIXct(out$body$series$startdate, tz=tz, origin="1970-01-01")
out$body$series$enddate <- as.POSIXct(out$body$series$enddate, tz=tz, origin="1970-01-01")
out$body$series <- dplyr::arrange(out$body$series, startdate)
}
return(out)
}
getactivity <- function(token, startdate=NULL, enddate=NULL, offset=NULL, lastupdate=NULL, tz="") {
# measures <- getmeas(token, meastype = 1, category=1, "2018-01-01", "2018-10-18")
if( class(startdate) == "character" ) { startdate = as.Date(startdate) }
if( class(enddate) == "character" ) { enddate = as.Date(enddate) }
if( class(lastupdate) == "character" ) { lastupdate = as.Date(lastupdate) }
if( sum(class(startdate) == "POSIXct")>=1 ) { startdate = as.Date(startdate) }
if( sum(class(enddate) == "POSIXct")>=1 ) { enddate = as.Date(enddate) }
if( sum(class(lastupdate) == "POSIXct")>=1 ) { lastupdate = as.Date(lastupdate) }
if(is.null(startdate) & is.null(enddate) & is.null(lastupdate)) {
stop("Enter both a startdate and enddate, or a lastupdate")
}
if(!is.null(startdate) & !is.null(enddate) & !is.null(lastupdate)) {
stop("Enter both a startdate and enddate, or a lastupdate")
}
if(is.null(startdate) != is.null(enddate)) {
stop("Enter both a startdate and enddate, or a lastupdate")
}
req <- httr::GET("https://wbsapi.withings.net/v2/measure?action=getactivity",
query=list(access_token=token$credentials$access_token,
startdateymd = startdate,
enddateymd = enddate,
offset = offset,
lastupdate = lastupdate))
httr::stop_for_status(req)
out <- httr::content(req)
out <- jsonlite::fromJSON(out)
if(out$status==0) {
out$body$activities <- jsonlite::flatten(out$body$activities)
}
return(out)
}
getintradayactivity <- function(token, startdate=NULL, enddate=NULL, tz="") {
if( class(startdate) == "character" ) { startdate = as.Date(startdate) }
if( class(enddate) == "character" ) { enddate = as.Date(enddate) }
if( class(startdate) == "Date" ) { startdate = as.POSIXct(startdate, tz=tz) }
if( class(enddate) == "Date" ) { enddate = as.POSIXct(enddate, tz=tz) }
if( sum(class(startdate) == "POSIXct")>=1 ) { startdate = as.numeric(startdate) }
if( sum(class(enddate) == "POSIXct")>=1 ) { enddate = as.numeric(enddate) }
if(is.null(startdate) != is.null(enddate)) {
stop("Enter both a startdate and enddate")
}
req <- httr::GET("https://wbsapi.withings.net/v2/measure?action=getintradayactivity",
query=list(access_token=token$credentials$access_token,
startdate = startdate,
enddate = enddate))
httr::stop_for_status(req)
out <- httr::content(req)
out <- jsonlite::fromJSON(out)
if(out$status==0) {
out$body$series <- bind_rows( out$body$series, .id="id")
}
return(out)
}
getworkouts <- function(token, startdate=NULL, enddate=NULL, offset=NULL, lastupdate=NULL, tz="") {
# measures <- getmeas(token, meastype = 1, category=1, "2018-01-01", "2018-10-18")
if( class(startdate) == "character" ) { startdate = as.Date(startdate) }
if( class(enddate) == "character" ) { enddate = as.Date(enddate) }
if( class(lastupdate) == "character" ) { lastupdate = as.Date(lastupdate) }
if( sum(class(startdate) == "POSIXct")>=1 ) { startdate = as.Date(startdate) }
if( sum(class(enddate) == "POSIXct")>=1 ) { enddate = as.Date(enddate) }
if( sum(class(lastupdate) == "POSIXct")>=1 ) { lastupdate = as.Date(lastupdate) }
if(!is.null(startdate) & !is.null(enddate) & !is.null(lastupdate)) {
stop("Enter both a startdate and enddate, or a lastupdate, or nothing")
}
if(is.null(startdate) != is.null(enddate)) {
stop("Enter both a startdate and enddate, or a lastupdate, or nothing")
}
req <- httr::GET("https://wbsapi.withings.net/v2/measure?action=getworkouts",
query=list(access_token=token$credentials$access_token,
startdateymd = startdate,
enddateymd = enddate,
offset = offset,
lastupdate = lastupdate))
httr::stop_for_status(req)
out <- httr::content(req)
out <- jsonlite::fromJSON(out)
if(out$status==0) {
out$body$series <- jsonlite::flatten(out$body$series)
out$body$series$startdate <- as.POSIXct(out$body$series$startdate, tz=tz, origin="1970-01-01")
out$body$series$enddate <- as.POSIXct(out$body$series$enddate, tz=tz, origin="1970-01-01")
out$body$series$data.device_startdate <- as.POSIXct(out$body$series$data.device_startdate, tz=tz, origin="1970-01-01")
out$body$series$data.device_enddate <- as.POSIXct(out$body$series$data.device_enddate, tz=tz, origin="1970-01-01")
}
return(out)
}
getmeas(token, meastype = 1, category=1, "2018-01-01", "2018-10-18")
getsleep(token, "2018-10-16", "2018-10-18")
getsleepsummary(token, "2018-10-16", "2018-10-18")
getactivity(token, "2018-10-16", "2018-10-18")
getintradayactivity(token, "2018-10-16", "2018-10-18")
use_package("dplyr")
#' @param enddate End date in character, date or POSIXct format
#' @param tz Time zone
#'
#' @return
#' @export
#'
#' @examples
#' \dontrun{
#' getintradayactivity(token, "2018-10-16", "2018-10-18")
#' }
getintradayactivity <- function(token, startdate=NULL, enddate=NULL, tz="") {
if( class(startdate) == "character" ) { startdate = as.Date(startdate) }
if( class(enddate) == "character" ) { enddate = as.Date(enddate) }
if( class(startdate) == "Date" ) { startdate = as.POSIXct(startdate, tz=tz) }
if( class(enddate) == "Date" ) { enddate = as.POSIXct(enddate, tz=tz) }
if( sum(class(startdate) == "POSIXct")>=1 ) { startdate = as.numeric(startdate) }
if( sum(class(enddate) == "POSIXct")>=1 ) { enddate = as.numeric(enddate) }
if(is.null(startdate) != is.null(enddate)) {
stop("Enter both a startdate and enddate")
}
req <- httr::GET("https://wbsapi.withings.net/v2/measure?action=getintradayactivity",
query=list(access_token=token$credentials$access_token,
startdate = startdate,
enddate = enddate))
httr::stop_for_status(req)
out <- httr::content(req)
out <- jsonlite::fromJSON(out)
if(out$status==0) {
out$body$series <- dplyr::bind_rows( out$body$series, .id="id")
}
return(out)
}
getintradayactivity(token, "2018-10-16", "2018-10-18")
getworkouts(token, "2018-10-16", "2018-10-18")
#' @param lastupdate Last update (see API)
#' @param tz Time zone
#'
#' @return
#' @export
#'
#' @examples
#' \dontrun{
#' getworkouts(token, "2018-10-16", "2018-10-18")
#' }
getworkouts <- function(token, startdate=NULL, enddate=NULL, offset=NULL, lastupdate=NULL, tz="") {
# measures <- getmeas(token, meastype = 1, category=1, "2018-01-01", "2018-10-18")
if( class(startdate) == "character" ) { startdate = as.Date(startdate) }
if( class(enddate) == "character" ) { enddate = as.Date(enddate) }
if( class(lastupdate) == "character" ) { lastupdate = as.Date(lastupdate) }
if( sum(class(startdate) == "POSIXct")>=1 ) { startdate = as.Date(startdate) }
if( sum(class(enddate) == "POSIXct")>=1 ) { enddate = as.Date(enddate) }
if( sum(class(lastupdate) == "POSIXct")>=1 ) { lastupdate = as.Date(lastupdate) }
if(!is.null(startdate) & !is.null(enddate) & !is.null(lastupdate)) {
stop("Enter both a startdate and enddate, or a lastupdate, or nothing")
}
if(is.null(startdate) != is.null(enddate)) {
stop("Enter both a startdate and enddate, or a lastupdate, or nothing")
}
req <- httr::GET("https://wbsapi.withings.net/v2/measure?action=getworkouts",
query=list(access_token=token$credentials$access_token,
startdateymd = startdate,
enddateymd = enddate,
offset = offset,
lastupdate = lastupdate))
httr::stop_for_status(req)
out <- httr::content(req)
out <- jsonlite::fromJSON(out)
if(out$status==0 & length(out$body$series) > 0) {
out$body$series <- jsonlite::flatten(out$body$series)
out$body$series$startdate <- as.POSIXct(out$body$series$startdate, tz=tz, origin="1970-01-01")
out$body$series$enddate <- as.POSIXct(out$body$series$enddate, tz=tz, origin="1970-01-01")
out$body$series$data.device_startdate <- as.POSIXct(out$body$series$data.device_startdate, tz=tz, origin="1970-01-01")
out$body$series$data.device_enddate <- as.POSIXct(out$body$series$data.device_enddate, tz=tz, origin="1970-01-01")
}
return(out)
}
getworkouts(token, "2018-10-16", "2018-10-18")
usethis::use_r("munge")
use_package("tibble")
use_package("stringr")
use_package("readr")
usethis::use_pipe()
?usethis::use_roxygen_md()
usethis::use_package("purrr")
usethis::use_package("tidyr")
startdurval <- function(start, dur, value) {
durations <- as.numeric(strsplit(dur, ",")[[1]])
values <- as.numeric(strsplit(value, ",")[[1]])
starts <- c(start, start + cumsum(durations[-length(durations)]))
tibble::tibble(start = starts,
duration=durations,
value=values)
}
read_csv_startdurval <- function(filename, tz=Sys.timezone()) {
dat <- readr::read_csv(filename, col_types = "ccc")
dat$duration <- stringr::str_replace_all(dat$duration, "\\[|\\]", "")
dat$value <- str_replace_all(dat$value, "\\[|\\]", "")
dat$start <- lubridate::as_datetime(dat$start, tz=tz)
dat <- dplyr::group_by(dat)
dat <- dplyr::mutate(minidat = purrr::pmap(
.l = list(duration, value, start),
~startdurval(start, duration, value)
))
dat <- dplyr::ungroup(dat)
dat <- dplyr::select(dat, minidat)
dat <- tidyr::unnest(dat)
dat <- dplyr::mutate(dat,
date = as.Date(start),
end = start + duration,
mid = start + duration/2)
return(dat)
}
k <- read_csv_startdurval('raw_tracker_steps.csv')
startdurval <- function(start, dur, value) {
durations <- as.numeric(strsplit(dur, ",")[[1]])
values <- as.numeric(strsplit(value, ",")[[1]])
starts <- c(start, start + cumsum(durations[-length(durations)]))
tibble::tibble(start = starts,
duration=durations,
value=values)
}
read_csv_startdurval <- function(filename, tz=Sys.timezone()) {
dat <- readr::read_csv(filename, col_types = "ccc")
dat$duration <- stringr::str_replace_all(dat$duration, "\\[|\\]", "")
dat$value <- stringr::str_replace_all(dat$value, "\\[|\\]", "")
dat$start <- lubridate::as_datetime(dat$start, tz=tz)
dat <- dplyr::group_by(dat)
dat <- dplyr::mutate(minidat = purrr::pmap(
.l = list(duration, value, start),
~startdurval(start, duration, value)
))
dat <- dplyr::ungroup(dat)
dat <- dplyr::select(dat, minidat)
dat <- tidyr::unnest(dat)
dat <- dplyr::mutate(dat,
date = as.Date(start),
end = start + duration,
mid = start + duration/2)
return(dat)
}
k <- read_csv_startdurval('raw_tracker_steps.csv')
filename <- "raw_tracker_steps.csv"
dat <- readr::read_csv(filename, col_types = "ccc")
dat$duration <- stringr::str_replace_all(dat$duration, "\\[|\\]", "")
dat$value <- stringr::str_replace_all(dat$value, "\\[|\\]", "")
dat$start <- lubridate::as_datetime(dat$start, tz=tz)
tz=Sys.timezone()
dat$start <- lubridate::as_datetime(dat$start, tz=tz)
dat <- dplyr::group_by(dat)
dat <- dplyr::mutate(minidat = purrr::pmap(
.l = list(duration, value, start),
~startdurval(start, duration, value)
))
dat <- dplyr::mutate(minidat = purrr::pmap(
.l = list(dat$duration, dat$value, dat$start),
~startdurval(start, duration, value)
))
read_csv_startdurval <- function(filename, tz=Sys.timezone()) {
dat <- readr::read_csv(filename, col_types = "ccc")
dat$duration <- stringr::str_replace_all(dat$duration, "\\[|\\]", "")
dat$value <- stringr::str_replace_all(dat$value, "\\[|\\]", "")
dat$start <- lubridate::as_datetime(dat$start, tz=tz)
dat <- dplyr::group_by(dat)
dat <- dplyr::mutate(minidat = purrr::pmap(
.l = list(dat$duration, dat$value, dat$start),
~startdurval(start, duration, value)
))
dat <- dplyr::ungroup(dat)
dat <- dplyr::select(dat, minidat)
dat <- tidyr::unnest(dat)
dat <- dplyr::mutate(dat,
date = as.Date(start),
end = start + duration,
mid = start + duration/2)
return(dat)
}
k <- read_csv_startdurval('raw_tracker_steps.csv')
read_csv_startdurval <- function(filename, tz=Sys.timezone()) {
dat <- readr::read_csv(filename, col_types = "ccc")
dat$duration <- stringr::str_replace_all(dat$duration, "\\[|\\]", "")
dat$value <- stringr::str_replace_all(dat$value, "\\[|\\]", "")
dat$start <- lubridate::as_datetime(dat$start, tz=tz)
dat <- dplyr::group_by(dat)
dat <- dplyr::mutate(minidat = purrr::pmap(
.l = list(dat$start, dat$duration, dat$value),
~startdurval(start, duration, value)
))
dat <- dplyr::ungroup(dat)
dat <- dplyr::select(dat, minidat)
dat <- tidyr::unnest(dat)
dat <- dplyr::mutate(dat,
date = as.Date(start),
end = start + duration,
mid = start + duration/2)
return(dat)
}
k <- read_csv_startdurval('raw_tracker_steps.csv')
usethis::use_pipe()
usethis::use_pipe()
usethis::use_roxygen_md()
remotes::install_github("r-lib/roxygen2md")
install.packages("remotes")
remotes::install_github("r-lib/roxygen2md")
roxygen2md::roxygen2md()
usethis::use_pipe()
devtools::document()
read_csv_startdurval <- function(filename, tz=Sys.timezone()) {
dat <- readr::read_csv(filename, col_types = "ccc") %>%
dplyr::mutate(
duration = stringr::str_replace_all(duration, "\\[|\\]", ""),
value = stringr::str_replace_all(value, "\\[|\\]", ""),
start = lubridate::as_datetime(start)) %>%
dplyr::group_by(start) %>%
dplyr::mutate(minidat = purrr::pmap(
.l = list(start, duration, value),
~startdurval(start, duration, value))) %>%
dplyr::ungroup() %>%
dplyr::select(minidat) %>%
dplyr::unnest() %>%
dplyr::mutate(date = as.Date(start),
end = start + duration,
mid = start + duration/2)
return(dat)
}
k <- read_csv_startdurval('raw_tracker_steps.csv')
devtools::load_all()
k <- read_csv_startdurval('raw_tracker_steps.csv')
usethis::use_pipe()
devtools::document()
devtools::document()
devtools::load_all()
k <- read_csv_startdurval('raw_tracker_steps.csv')
read_csv_startdurval <- function(filename, tz=Sys.timezone()) {
dat <- readr::read_csv(filename, col_types = "ccc") %>%
dplyr::mutate(
duration = stringr::str_replace_all(duration, "\\[|\\]", ""),
value = stringr::str_replace_all(value, "\\[|\\]", ""),
start = lubridate::as_datetime(start)) %>%
dplyr::group_by(start) %>%
dplyr::mutate(minidat = purrr::pmap(
.l = list(start, duration, value),
~startdurval(start, duration, value))) %>%
dplyr::ungroup() %>%
dplyr::select(minidat) %>%
tidyr::unnest() %>%
dplyr::mutate(date = as.Date(start),
end = start + duration,
mid = start + duration/2)
return(dat)
}
k <- read_csv_startdurval('raw_tracker_steps.csv')
k
startdurval("2018-10-10T01:55:31+02:00",
"[29,60,60,60]", "[23,9,9,35]" )
startdurval("2018-10-10T01:55:31+02:00",
"29,60,60,60", "23,9,9,35" )
startdurval("2018-10-09 20:18:00",
"29,60,60,60", "23,9,9,35" )
start = "2018-10-09 20:18:00"
dur <- "29,60,60,60"
val <- "23,9,9,35"
durations <- as.numeric(strsplit(dur, ",")[[1]])
values <- as.numeric(strsplit(value, ",")[[1]])
starts <- c(start, start + cumsum(durations[-length(durations)]))
durations
value <- "23,9,9,35"
starts <- c(start, start + cumsum(durations[-length(durations)]))
values <- as.numeric(strsplit(value, ",")[[1]])
values
start
start + 20
startdurval(Sys.time(),
"29,60,60,60", "23,9,9,35" )
getmeas(token, meastype = 1, category=1, "2018-01-01", "2018-10-18")
devtools::document()
devtools::document()
devtools::document()
usethis::use_readme_md()
?rwithings
??rwithings
?rwithings::getintradayactivity()
?rwithings::withings_auth()
devtools::document()
devtools::check()
devtools::check()
use_package("stats")
use_package("start")
devtools::document()
